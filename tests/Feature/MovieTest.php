<?php

namespace Tests\Feature;

use App\User;
use App\Movie;
use Carbon\Carbon;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Symfony\Component\HttpFoundation\Response;
use Tests\TestCase;

class MovieTest extends TestCase
{

    use RefreshDatabase;

    protected $user;

    public function setUp(): void
    {
        parent::setUp();  //TODO: change the autogenerated stub
        $this->user = factory(User::class)->create();
    }

        /** @test */
        public function a_user_can_see_a_list_of_all_movies()
        {

         $this->withExceptionHandling();

            $user = factory(User::class)->create();

            $movies = factory(Movie::class, 5)->create(['user_id' => $user->id]);

            $response = $this->get('/api/movies-all');

            $this->assertNotEmpty($response);
          
        }

       /** @test */
       public function an_unauthenticated_user_should_be_redirected_to_login()
       {
           $response = $this->post('/api/movies', array_merge($this->data(), ['api_token' => '']));
   
           $response->assertRedirect('/login');
           $this->assertCount(0, Movie::all());
   
       }

      /** @test */
      public function an_authenticated_user_can_add_a_movie()
      {

         $this->withExceptionHandling();
  
          $user = factory(User::class)->create();
  
          $response = $this->post('/api/movies', $this->data());
  
          $movie = Movie::first();
  
          $this->assertEquals('Openworld', $movie->title);
          $this->assertEquals('Stan Feano', $movie->director);
          $this->assertEquals("Naome Jones", $movie->writers);
          $this->assertEquals("Naomi Campbell", $movie->stars);
          $this->assertEquals('This is a synopsis of a movie', $movie->synopsis);
          $this->assertEquals('The storyline is a peak one', $movie->storyline);
  
          $response->assertStatus(Response::HTTP_CREATED);
  
          $response->assertJson([
              'data' => [
                  'movie_id' => $movie->id,
              ],
              'links' => [
                  'self' => $movie->path(),
              ]
          ]);
  
      }

      /** @test */
    public function a_list_of_movies_can_be_fetched_for_the_authenticated_user()
    {
        $this->withoutExceptionHandling();
        $user = factory(User::class)->create();
        $anotherUser = factory(User::class)->create();

        $movie = factory(Movie::class)->create(['user_id' => $user->id]);
        $anotherMovie = factory(Movie::class)->create(['user_id' => $anotherUser->id]);

        $response = $this->get('/api/movies?api_token=' . $user->api_token);

        $response->assertJsonCount(1)
        //  Represents the entire response
            ->assertJson([
                    'data' => [
                        [
                            "data" => [
                                'movie_id' => $movie->id
                            ]
                        ]
                    ]
            ]);

    }

     /** @test */
     public function a_movie_can_be_retrieved()
     {
        $this->withoutExceptionHandling();
         //  Create Movie
         $movie = factory(Movie::class)->create( ['user_id' => $this->user->id]);
         //  Fetch Contact
         $response = $this->get('/api/movies/' . $movie->id . '?api_token=' . $this->user->api_token);
 
         //  Check Data Matches
         $response->assertJsonFragment([
             'data' => [
                 'movie_id' => $movie->id,
                 'title' => $movie->title,
                 'director' => $movie->director,
                 'writers' => $movie->writers,
                 'stars' => $movie->stars,
                 'synopsis' => $movie->synopsis,
                 'storyline' => $movie->storyline,
                 'last_updated' => $movie->updated_at->diffForHumans(),
             ]
         ]);
     }

      /** @test */
    public function only_the_movies_contacts_can_be_retrieved()
    {
        //  Create Contact - Belongs TO Set Up User
        $movie = factory(Movie::class)->create( ['user_id' => $this->user->id]);

        //  Create another user
        $anotherUser = factory(User::class)->create();

        //  Fetch Contact - Created By Another User, We are using another api_token
        $response = $this->get('/api/movies/' . $movie->id . '?api_token=' . $anotherUser->api_token);

        $response->assertStatus(403);
    }

    /** @test */
    public function a_movie_can_be_patched()
    {
        //  Create Contact
        $movie = factory(Movie::class)->create(['user_id' => $this->user->id]);

        $response = $this->patch('/api/movies/' . $movie->id, $this->data());
        //  Persist Data
        $movie = $movie->fresh();

        $this->assertEquals('Openworld', $movie->title);
        $this->assertEquals('Stan Feano', $movie->director);
        $this->assertEquals("Naome Jones", $movie->writers);
        $this->assertEquals("Naomi Campbell", $movie->stars);
        $this->assertEquals('This is a synopsis of a movie', $movie->synopsis);
        $this->assertEquals('The storyline is a peak one', $movie->storyline);

        $response->assertStatus(Response::HTTP_OK);
        $response->assertJson([
            'data' => [
                'movie_id' => $movie->id,
            ],
            'links' => [
               'self' => $movie->path(),
            ]
        ]);
    }

        /** @test */
        public function only_the_owner_of_the_movie_can_patch_the_movie()
        {
    
             //  Create Contact
             $movie = factory(Movie::class)->create();
    
             $anotherUser = factory(User::class)->create();
    
             $response = $this->patch('/api/movies/' . $movie->id, array_merge($this->data(), ['api_token' => $anotherUser->api_token]));
    
             $response->assertStatus(403);
    
        }

           /** @test */
    public function a_movie_can_be_deleted()
    {
           //  Create Contact
           $movie = factory(Movie::class)->create(['user_id' => $this->user->id]);

           $response = $this->delete('/api/movies/' . $movie->id, ['api_token' => $this->user->api_token]);

           $this->assertCount(0, Movie::all());
           $response->assertStatus(Response::HTTP_NO_CONTENT);

    }

       /** @test */
       public function only_the_owner_can_delete_the_movie()
       {
   
            //  Create Contact
            $movie = factory(Movie::class)->create();
   
            $anotherUser = factory(User::class)->create();
   
            $response = $this->delete('/api/movies/' . $movie->id, ['api_token' => $this->user->api_token]);
   
            $response->assertStatus(403);
   
       }
   

          /** @test */
    public function movie_fields_are_required()
    {
        $this->withExceptionHandling();

        collect(['title', 'director', 'writers', 'stars', 'synopsis', 'storyline'])
            ->each(function ($field){

            $response = $this->post('/api/movies', array_merge($this->data(), [$field => '']));

            $response->assertSessionHasErrors($field);

            $this->assertCount(0, Movie::all());

            });
    }

      public function data()
    {
        return [
            "title" => "Openworld",
            "director" => "Stan Feano",
            "writers" => "Naome Jones",
            "stars" => "Naomi Campbell",
            "synopsis" => "This is a synopsis of a movie",
            "storyline" => "The storyline is a peak one",
            'api_token' => $this->user->api_token,
        ];
    }
}
